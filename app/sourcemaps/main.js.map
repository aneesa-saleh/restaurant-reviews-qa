{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","markers","cuisines","newMap","mapInitialized","document","addEventListener","event","previouslyConnected","navigator","onLine","self","center","scrollWheelZoom","fetchNeighborhoods","updateRestaurants","registerServiceWorker","setInterval","cleanMapboxTilesCache","window","showConnectionStatus","DBHelper","error","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","option","createElement","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","value","append","mapboxToken","maxZoom","attribution","id","addTo","cIndex","cSelect","selectedIndex","nIndex","nSelect","resetRestaurants","marker","ul","fillRestaurantsHTML","restaurant","registerObserver","querySelectorAll","loadPicture","requestAnimationFrame","initMap","addMarkersToMap","bind","ø","picture","_picture$dataset","dataset","src","srcset","srcsetSmall","srcset_small","srcsetMedium","srcset_medium","sourceMedium","querySelector","alt","img","sourceSmall","createRestaurantHTML","type","setAttribute","imageUrlForRestaurant","size","appendChild","image","singleValue","article","span","name","address","more","mapMarkerForRestaurant","on","location","href","options","url","onClick","enqueueToast"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants;\nlet neighborhoods;\nlet cuisines;\nlet newMap;\nconst markers = [];\nlet mapInitialized = false;\nlet previouslyConnected;\nconst ø = Object.create(null);\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  previouslyConnected = navigator.onLine;\n  self.newMap = L.map('map', {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false,\n  });\n  updateRestaurants();\n  fetchNeighborhoods();\n  fetchCuisines();\n  registerServiceWorker();\n\n  if (window.caches) {\n    setInterval(cleanMapboxTilesCache, 5000);\n  }\n\n  if ('onLine' in navigator) {\n    window.addEventListener('online', showConnectionStatus);\n    window.addEventListener('offline', showConnectionStatus);\n    requestAnimationFrame(showConnectionStatus);\n  }\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\nconst initMap = () => {\n  const MAPBOX_API_KEY = 'pk.eyJ1IjoiYW5lZXNhLXNhbGVoIiwiYSI6ImNqa2xmZHVwMDFoYW4zdnAwYWplMm53bHEifQ.V11dDOtEnWSwTxY-C8mJLw';\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n    mapboxToken: MAPBOX_API_KEY,\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, '\n      + '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\n      + 'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets',\n  }).addTo(newMap);\n  mapInitialized = true;\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      // requestAnimationFrame(fillRestaurantsHTML.bind(ø, restaurants));\n      fillRestaurantsHTML(restaurants);\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  resetRestaurants(restaurants);\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant) => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  // register observer after the picture elements have been loaded\n  registerObserver(document.querySelectorAll('#restaurants-list picture'), loadPicture);\n\n  if (!mapInitialized) {\n    requestAnimationFrame(initMap);\n  }\n  requestAnimationFrame(addMarkersToMap.bind(ø, restaurants));\n};\n\nfunction loadPicture(picture) {\n  const {\n    src, srcset, srcset_small: srcsetSmall, srcset_medium: srcsetMedium,\n  } = picture.dataset;\n\n  const sourceMedium = picture.querySelector('source[data-size=\"medium\"]');\n  const sourceSmall = picture.querySelector('source[data-size=\"small\"]');\n  const img = picture.querySelector('img');\n\n  const { alt } = img.dataset;\n\n  sourceMedium.srcset = srcsetMedium;\n  sourceSmall.srcset = srcsetSmall;\n\n  img.srcset = srcset;\n  img.src = src;\n\n  img.setAttribute('aria-busy', 'false');\n  img.alt = alt;\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n  const article = document.createElement('article');\n\n  // for picture element, we leave src and srcset attributes of the source and image elements empty\n  // IntersectionObserver will be used to lazy load the images by setting their src and srcset\n  // as they enter the viewport\n  const picture = document.createElement('picture');\n\n  // a two-column layout is used for larger viewports\n  // medium images are displayed for wide single-column (451px - 749px) and wide 2-column viewports (>= 950px)\n  const sourceMedium = document.createElement('source');\n  sourceMedium.media = '(min-width: 451px) and (max-width: 749px), (min-width: 950px)';\n  sourceMedium.type = 'image/jpeg';\n  sourceMedium.setAttribute('data-size', 'medium');\n  picture.setAttribute('data-srcset_medium', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.appendChild(sourceMedium);\n\n  // small images are displayed for small single-column (<= 450px) and small 2-column viewports (750px - 949px)\n  const sourceSmall = document.createElement('source');\n  sourceSmall.media = '(max-width: 450px), (min-width: 750px) and (max-width: 949px)';\n  sourceSmall.type = 'image/jpeg';\n  sourceSmall.setAttribute('data-size', 'small');\n  picture.setAttribute('data-srcset_small', DBHelper.imageUrlForRestaurant(restaurant, { size: 'small' }));\n  picture.appendChild(sourceSmall);\n\n  const image = document.createElement('img');\n  image.classList.add('restaurant-img');\n  // set default size in case picture element is not supported\n  picture.setAttribute('data-srcset', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium' }));\n  picture.setAttribute('data-src', DBHelper.imageUrlForRestaurant(restaurant, { size: 'medium', singleValue: true }));\n  image.setAttribute('data-alt', restaurant.alt);\n  image.setAttribute('aria-busy', 'true');\n  image.alt = '';\n\n  picture.appendChild(image);\n\n  article.append(picture);\n\n  const span = document.createElement('span');\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  span.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  span.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  span.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('aria-label', `View Details of ${restaurant.name}`);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  span.append(more);\n\n  article.append(span);\n\n  return article;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n\nfunction showConnectionStatus() {\n  if (navigator.onLine && !previouslyConnected) { // user came back online\n    enqueueToast('You are back online', 'success');\n  } else if (!navigator.onLine && previouslyConnected) { // user went offline\n    enqueueToast('You are offline', 'error');\n  }\n\n  previouslyConnected = navigator.onLine;\n}\n"]}