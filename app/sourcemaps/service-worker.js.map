{"version":3,"sources":["service-worker.js"],"names":["importScripts","staticCacheName","restaurantImagesCache","mapboxTilesCache","fontsCache","fontAwesomeCache","self","addEventListener","addAll","event","catch","caches","console","then","cache","dbPromise","requestId","log","request_id","keys","cacheNames","Promise","all","filter","cacheName","startsWith","allCaches","includes","delete","waitUntil","error","outboxStore","claim","openDatabase","rating","addReview","restaurant_id","type","_event$data","data","review","clients","forEach","transaction","client","objectStore","postMessage","sync","register","db","get","request","name","comments","newReview","matchAll","reviewsStore","requestUrl","origin","restaurantImagePathRegex","put","respondWith","response","fetch","serveFonts","URL","url","serveFontAwesome","test","pathname","serveRestaurantImage","match","serveMapboxTiles","endsWith","storageUrl","networkResponse","ignoreSearch","open","clone"],"mappings":"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","file":"../service-worker.js","sourcesContent":["importScripts('/js/helpers.js', 'https://cdn.jsdelivr.net/npm/idb@2.1.3/lib/idb.min.js');\n\nconst staticCacheName = 'restaurant-reviews-static-v5';\nconst restaurantImagesCache = 'restaurant-reviews-restaurant-images';\nconst mapboxTilesCache = 'restaurant-reviews-map-tiles';\nconst fontsCache = 'restaurant-reviews-fonts';\nconst fontAwesomeCache = 'font-awesome';\nconst allCaches = [\n  staticCacheName,\n  restaurantImagesCache,\n  mapboxTilesCache,\n  fontsCache,\n  fontAwesomeCache,\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(staticCacheName).then(cache => cache.addAll([\n      '/',\n      '/restaurant.html',\n      '/css/restaurant-details.css',\n      '/css/restaurants-list.css',\n      '/js/helpers.js',\n      '/js/main.js',\n      '/js/restaurant_info.js',\n      '/img/offline.svg',\n      '/img/offline_wide.svg',\n      '/img/spinner.gif',\n      '/img/restaurant_map_tiny.png',\n      '/img/restaurants_map_tiny.png',\n      'https://cdn.rawgit.com/jakearchibald/idb/master/lib/idb.js',\n      'https://use.fontawesome.com/releases/v5.5.0/css/all.css',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.css',\n      'https://unpkg.com/leaflet@1.3.1/dist/leaflet.js',\n      'https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,700',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-icon-2x.png',\n      'https://unpkg.com/leaflet@1.3.1/dist/images/marker-shadow.png',\n    ])).catch(error => console.log(error)),\n  );\n});\n\nself.addEventListener('activate', (event) => {\n  // delete the old versions of the cache\n  event.waitUntil(\n    caches.keys().then(cacheNames => Promise.all(\n      cacheNames.filter(cacheName => (\n        cacheName.startsWith('restaurant-reviews-') && !allCaches.includes(cacheName)\n      )).map(cacheName => caches.delete(cacheName)),\n    )).catch(error => console.log(error)),\n  );\n\n  self.clients.claim();\n});\n\nconst dbPromise = openDatabase(true);\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'post-review') {\n    const { review, requestId } = event.data;\n    dbPromise.then((db) => {\n      const outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n      outboxStore.put({ ...review, request_id: requestId });\n      self.registration.sync.register(requestId);\n    });\n  }\n});\n\nself.addEventListener('sync', (event) => {\n  event.waitUntil(\n    dbPromise.then((db) => {\n      const requestId = event.tag;\n      let outboxStore = db.transaction('outbox').objectStore('outbox');\n      outboxStore.get(requestId).then((request) => {\n        const {\n          restaurant_id, name, rating, comments,\n        } = request;\n        return DBHelper.addReview(restaurant_id, name, rating, comments, (error, newReview) => {\n          if (error) {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                client.postMessage({\n                  type: 'update-review',\n                  error: true,\n                  requestId,\n                });\n              });\n            });\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          } else {\n            // broadcast update to all clients\n            self.clients.matchAll().then((clients) => {\n              clients.forEach((client) => {\n                client.postMessage({\n                  type: 'update-review',\n                  review: newReview,\n                  requestId,\n                });\n              });\n            });\n            // add review to reviews store\n            const reviewsStore = db.transaction('reviews', 'readwrite').objectStore('reviews');\n            reviewsStore.put(newReview);\n            // delete review from outbox store\n            outboxStore = db.transaction('outbox', 'readwrite').objectStore('outbox');\n            outboxStore.delete(requestId);\n          }\n        });\n      });\n    }),\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  const requestUrl = new URL(event.request.url);\n\n  if (requestUrl.origin === location.origin) {\n    const restaurantImagePathRegex = /img\\/[0-9_\\-a-zA-Z]+\\.jpg/;\n    if (restaurantImagePathRegex.test(requestUrl.pathname)) {\n      event.respondWith(serveRestaurantImage(event.request));\n      return;\n    }\n\n    // cache should match index.html to /\n    if (requestUrl.pathname.startsWith('/index.html')) {\n      event.respondWith(caches.match('/')\n        .then(response => response || fetch(event.request)));\n      return;\n    }\n  } else if (requestUrl.origin === 'https://api.tiles.mapbox.com') {\n    event.respondWith(serveMapboxTiles(event.request));\n    return;\n  } else if (requestUrl.origin === 'https://fonts.gstatic.com') {\n    event.respondWith(serveFonts(event.request));\n    return;\n  } else if (requestUrl.origin === 'https://use.fontawesome.com' && !(requestUrl.pathname.endsWith('.css'))) {\n    event.respondWith(serveFontAwesome(event.request));\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request, { ignoreSearch: true }) // ignore search for /restaurant.html?id=X\n      .then(response => response || fetch(event.request)),\n  );\n});\n\nconst serveRestaurantImage = (request) => {\n  // image urls have multiple - and _ for orientation, crop, pixel density and screen size\n  // the relevant part of the url is before the first -\n  const storageUrl = request.url.split('-')[0];\n\n  return caches.open(restaurantImagesCache).then(\n    cache => cache.match(storageUrl).then((response) => {\n      if (response) return response;\n\n      return fetch(request).then((networkResponse) => {\n        cache.put(storageUrl, networkResponse.clone());\n        return networkResponse;\n      }).catch((error) => {\n        console.log(error);\n        // use of offline images inspired by Salah Hamza's stage 1 project\n        // Available at https://github.com/SalahHamza/mws-restaurant-stage-1/blob/master/sw.js\n        if (request.url.includes('wide')) return caches.match('/img/offline_wide.svg');\n        return caches.match('/img/offline.svg');\n      });\n    }),\n  );\n};\n\nconst serveMapboxTiles = request => caches.open(mapboxTilesCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n\nconst serveFonts = request => caches.open(fontsCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n\nconst serveFontAwesome = request => caches.open(fontAwesomeCache).then(\n  cache => cache.match(request.url).then((response) => {\n    if (response) return response;\n\n    // if request isn't cached, cache it when fetch response is returned\n    return fetch(request).then((networkResponse) => {\n      cache.put(request.url, networkResponse.clone());\n      return networkResponse;\n    });\n  }),\n);\n"]}